[학습]
1. AOP Aspect Oriented Programming
	- 관점 지향 프로그래밍
	- 공통 기능을 분리하여 모듈화하여 지정 시점에 해당 로직이 실행하게 함
	
	- Advice
		- 공통 기능의 코드, 메소드
		- 동작 시점 
			Before : 메소드 실행 전에 동작
			After : 메소드 실행 후에 동작
			After-returning : 메소드가 정상적으로 실행된 후에 동작
			After-throwing : 예외가 발생한 후에 동작
			Around : 메소드 호출 이전, 이후, 예외발생 등 모든 시점에서 동작

	- Joinpoint
		- Advice 적용 위치 및 시점
		
	- Pointcut 
		- 특정 조건에 의해 필터링된 조인포인트
		- execution([수식어] 리턴타입 [클래스이름].이름(파라미터))
			execution(public String com.sping.aop.*.*(*))
			execution(* com.sping..*.get*(..))
			execution(* com.sping.spring..*Service.*(..))
			
		- within(타입패턴)
			within(com.spring.aop.SomeService)
			within(com.spring.aop.*)
			within(com.spring.aop..*)
	
	- Weaving
		- AOP Framework가 공통 코드를 핵심 코드에 삽입하는 것

	- Aspect
		- Pointcut + Advice	
	
	- Annotations
		@Aspect	: AOP로 정의하는 클래스 지정
		@Pointcut : 메소드, Annotation 등 적용 지점 설정
		@Before	: 메소드 실행 전
		@After : 메소드 성공 실행 후(예외 발생 되더라도 실행)
		@AfterReturning : 메소드가 정상적으로 종료
		@AfterThrowing : 메소드에서 예외가 발생
		@Around : Before + After 모두 제어 (에외 발생 되더라도 실행)
