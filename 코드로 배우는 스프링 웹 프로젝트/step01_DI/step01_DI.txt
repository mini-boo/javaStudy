[step01_DI]

1. 의존성 관계 주입(Dependency Injection, DI), 제어의 역전(Inversion of Control, IoC)
	- 의존성
		- 한 객체가 다른 객체를 사용
		- 기능 추가 또는 변경 시, 소스 코드 변경 불가피
			ex)
			public class Market {

			    private Snack snack;
			    
			    public Market() {
			    	this.snack = new Snack();
			    }
			
			}
		
		- 클래스간 의존도가 높은 형태는 확장성 저하 야기
		- 이를 해결 하기 위해 인터페이스 활용하는 것을 추천
			ex)
			public interface Product{ 
			
			}
			
			public class Snack implements Product{
			
			}	
			
			// 위의 Market보다 확장성 있는 구조(클래스간 결합이 느슨해짐)
			public class Market {

			    private Product product;
			    
			    public Market(Product product) {
			    	this.product = new Product();
			    }
			
			}
			
			// 실제 사용
			Snack snack = new Snack();
			
			Market market = new Market(snack);
			
			// snack 객체 생성 후, Market에 이를 주입하는 행위를 Spring의 DI컨테이너(IoC 컨테이너)가 담당
			// -> 제어의 역전(Inversion of Control, IoC)
			// Bean : DI 컨테이너가 관리하는 자바의 POJO(Plain Old Java Object)를 빈 bean이라고 칭함.
			
2. 설정
	1. XML
		- 생성자 주입(Constructor Injection)
			<bean id="고유값" class="지정 클래스">
				<constructor-arg name="" value="" />
			</bean>
		
		- 필드 주입(Field Injection)
			<bean id="고유값" class="지정 클래스">
				<property name="" value="" />
				<property name="" ref="참조bean 고유값" />
			</bean>
	
	2. Annotation : @Autowired - 필요 의존 객체 타입에 해당하는 bean 주입하는 기능
		- 생성자 주입
			// ver1
			public class Market {
	
			    private Product product;
			    
			    @Autowired 
			    public Market(Product product) {
			    	this.product = new Product();
			    }
			}
			
			// ver2
			@RequiredArgsConstructor
			public class Market {

			    private final Product product;
			
			}
	 
		- 필드 주입 
			public class Market {
	
				@Autowired
			    private Product product;
			    
			}
			
		- 수정자 주입(Setter Injection)
			public class Market {

				private Product product;
				
				@Autowired
				public void setProduct(Product product) {
					this.product = product
				}
			}
					
			
			
			